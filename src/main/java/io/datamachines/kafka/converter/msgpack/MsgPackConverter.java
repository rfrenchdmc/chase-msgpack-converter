/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.datamachines.kafka.converter.msgpack;

import java.util.Map;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;

import org.apache.kafka.common.KafkaException;
import org.apache.kafka.connect.data.Schema;
import org.apache.kafka.connect.data.SchemaAndValue;
import org.apache.kafka.connect.storage.Converter;

import org.msgpack.core.MessagePack;
import org.msgpack.core.MessageFormat;
import org.msgpack.core.MessageUnpacker;
import org.msgpack.jackson.dataformat.MessagePackFactory;
import org.msgpack.value.ValueType;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.kafka.connect.json.JsonConverter;

public class MsgPackConverter implements Converter {
    private static final Logger log = LoggerFactory.getLogger(MsgPackConverter.class);

    private JsonConverter jsonConverter;

    public MsgPackConverter() {
        jsonConverter = new JsonConverter();
    }

    @Override
    public void configure(Map<String, ?> configs, boolean isKey) {
        // TODO Auto-generated method stub
        jsonConverter.configure(configs, isKey);
        log.info("Configuring");
    }

    @Override
    public byte[] fromConnectData(String topic, Schema schema, Object value) {
        throw new KafkaException("Not Implemented");
    }

    @Override
    public SchemaAndValue toConnectData(String topic, byte[] value) {
        try {
            ObjectMapper objectMapper = new ObjectMapper(new MessagePackFactory());
            JsonNode root = objectMapper.readTree((byte[])value);

            String val = new ObjectMapper().writeValueAsString(root);
            log.trace(new String(val));
            return jsonConverter.toConnectData(topic, val.getBytes());

        } catch (IOException io) {
            throw new KafkaException(io);
        }
    }
}
